I":	<h1 id="binary-heaps">Binary Heaps</h1>

<h2 id="priority-queues">Priority Queues</h2>

<p>Anything that <strong>IMPLEMENTS FORCEFUL DISCIPLINE</strong> can be considered a priority queue.</p>

<ul>
  <li><strong>I</strong> - insert with priority</li>
  <li><strong>F</strong> - Find the minimum (the root)</li>
  <li><strong>D</strong> - Delete the min, remove root, re-percolate</li>
</ul>

<h2 id="data-structure-running-times">Data Structure Running Times</h2>

<p><img src="/static/assets/media/pq.png" alt="" /></p>

<p>A heap gives us:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">findMin()</code> - $\Theta(1)$</li>
  <li><code class="language-plaintext highlighter-rouge">deleteMin()</code> - $\Theta(log(n))$ worst and average</li>
  <li><code class="language-plaintext highlighter-rouge">insert</code> - $\Theta(log(n))$ worst, typically $\Theta(1)$</li>
</ul>

<h2 id="properties">Properties</h2>

<ul>
  <li>Structure - <strong>almost complete</strong> binary tree with bottom exception, levels filled left to right</li>
  <li>Order - Every parent is smaller than it’s child (in a minheap)</li>
  <li>$2^{h+1}-1$ nodes</li>
  <li>$2^h-1$ non-leaves</li>
  <li>$2^h$ leaves</li>
</ul>

<h2 id="benefits-of-arrays">Benefits of Arrays</h2>

<ul>
  <li>Saves space</li>
  <li>Saves time</li>
  <li>Easy to find stuff</li>
</ul>

<h3 id="array-representation">Array Representation</h3>

<ul>
  <li>Note that <strong>the zero index has NOTHING</strong></li>
  <li>Level by level, left to right</li>
  <li><strong>Left Child</strong> - $2i$</li>
  <li><strong>Right Child</strong> - $2i+1$</li>
  <li><strong>Parent</strong> - $\text{floor}(\frac{i}{2})$</li>
</ul>

<h2 id="operations--animation">Operations + Animation</h2>

<p>See <a href="https://www.cs.usfca.edu/~galles/JavascriptVisual/Heap.html">this</a></p>

<ul>
  <li>Insertion - put it in, <code class="language-plaintext highlighter-rouge">percolateUp</code> - Is my parent greater? Let’s swap then.</li>
  <li>Deletion - put it in, <code class="language-plaintext highlighter-rouge">percolateDown</code> - Move farthest down farthest right node to root, and percolate it down.</li>
</ul>

<h1 id="huffman-encoding">Huffman Encoding</h1>

<p>Repeatedly take the two highest priority (smallest) node and create a joining node with the sum of them as its priority.</p>
:ET